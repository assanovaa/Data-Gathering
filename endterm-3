{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOGDZFHyosv5JvGcegcJl2M",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/assanovaa/Data-Gathering/blob/main/endterm-3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "GCA3MXgvFk0h"
      },
      "outputs": [],
      "source": [
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report"
      ],
      "metadata": {
        "id": "EzuQGTxWFpWL"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.upload()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        },
        "id": "rNOoB3_kFyE1",
        "outputId": "06e87757-4a64-4c07-c962-fabb233b582c"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-938d16ff-f219-4fc1-b380-90e4ecd64bbc\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-938d16ff-f219-4fc1-b380-90e4ecd64bbc\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving kaggle-2.json to kaggle-2.json\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'kaggle-2.json': b'{\"username\":\"aigerimaa\",\"key\":\"88da7ff661eaad5b95e7ff11546376b3\"}'}"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "os.environ['KAGGLE_CONFIG_DIR'] = \"/content\""
      ],
      "metadata": {
        "id": "RwmID46RGGY3"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle datasets download -d aigerimaa/database.csv\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z4U3mKnTGMfx",
        "outputId": "f51e9b2e-c546-4a0a-c67f-efc0f0b07d27"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "403 - Forbidden - Permission 'datasets.get' was denied\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "print(os.listdir())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a-iX_D7wGhWw",
        "outputId": "b3962a92-b3a1-46e8-8a5c-538a065e19e7"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['.config', 'kaggle-2.json', 'sample_data']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        },
        "id": "H6nXQco1Gs5T",
        "outputId": "b2484db3-f806-4375-c501-12e9aec493e2"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-865c8467-be8b-48f6-8d8f-3c83fcd35720\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-865c8467-be8b-48f6-8d8f-3c83fcd35720\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving kaggle-2.json to kaggle-2 (1).json\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_slug = \"usgs/earthquake-database\"\n",
        "\n",
        "\n",
        "download_path = \"/content/datasets\"\n",
        "\n",
        "!mkdir -p {download_path}\n",
        "\n",
        "!kaggle datasets download -d {dataset_slug} -p {download_path} --unzip"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "65-r1WLPGvCB",
        "outputId": "36b2a16a-6f16-4171-81ef-726b5658b9d8"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset URL: https://www.kaggle.com/datasets/usgs/earthquake-database\n",
            "License(s): CC0-1.0\n",
            "Downloading earthquake-database.zip to /content/datasets\n",
            "100% 590k/590k [00:00<00:00, 1.35MB/s]\n",
            "100% 590k/590k [00:00<00:00, 1.35MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv('/content/datasets/database.csv')\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "JEDdU7sHHprT",
        "outputId": "1f2ff296-000d-4fae-ccfc-de9d9b117286"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date      Time  Latitude  Longitude        Type  Depth  Depth Error  \\\n",
              "0  01/02/1965  13:44:18    19.246    145.616  Earthquake  131.6          NaN   \n",
              "1  01/04/1965  11:29:49     1.863    127.352  Earthquake   80.0          NaN   \n",
              "2  01/05/1965  18:05:58   -20.579   -173.972  Earthquake   20.0          NaN   \n",
              "3  01/08/1965  18:49:43   -59.076    -23.557  Earthquake   15.0          NaN   \n",
              "4  01/09/1965  13:32:50    11.938    126.427  Earthquake   15.0          NaN   \n",
              "\n",
              "   Depth Seismic Stations  Magnitude Magnitude Type  ...  \\\n",
              "0                     NaN        6.0             MW  ...   \n",
              "1                     NaN        5.8             MW  ...   \n",
              "2                     NaN        6.2             MW  ...   \n",
              "3                     NaN        5.8             MW  ...   \n",
              "4                     NaN        5.8             MW  ...   \n",
              "\n",
              "   Magnitude Seismic Stations  Azimuthal Gap  Horizontal Distance  \\\n",
              "0                         NaN            NaN                  NaN   \n",
              "1                         NaN            NaN                  NaN   \n",
              "2                         NaN            NaN                  NaN   \n",
              "3                         NaN            NaN                  NaN   \n",
              "4                         NaN            NaN                  NaN   \n",
              "\n",
              "   Horizontal Error  Root Mean Square            ID  Source Location Source  \\\n",
              "0               NaN               NaN  ISCGEM860706  ISCGEM          ISCGEM   \n",
              "1               NaN               NaN  ISCGEM860737  ISCGEM          ISCGEM   \n",
              "2               NaN               NaN  ISCGEM860762  ISCGEM          ISCGEM   \n",
              "3               NaN               NaN  ISCGEM860856  ISCGEM          ISCGEM   \n",
              "4               NaN               NaN  ISCGEM860890  ISCGEM          ISCGEM   \n",
              "\n",
              "  Magnitude Source     Status  \n",
              "0           ISCGEM  Automatic  \n",
              "1           ISCGEM  Automatic  \n",
              "2           ISCGEM  Automatic  \n",
              "3           ISCGEM  Automatic  \n",
              "4           ISCGEM  Automatic  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-61e3197a-5b5d-42bb-bb1a-9f04a2cb4adc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Time</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Type</th>\n",
              "      <th>Depth</th>\n",
              "      <th>Depth Error</th>\n",
              "      <th>Depth Seismic Stations</th>\n",
              "      <th>Magnitude</th>\n",
              "      <th>Magnitude Type</th>\n",
              "      <th>...</th>\n",
              "      <th>Magnitude Seismic Stations</th>\n",
              "      <th>Azimuthal Gap</th>\n",
              "      <th>Horizontal Distance</th>\n",
              "      <th>Horizontal Error</th>\n",
              "      <th>Root Mean Square</th>\n",
              "      <th>ID</th>\n",
              "      <th>Source</th>\n",
              "      <th>Location Source</th>\n",
              "      <th>Magnitude Source</th>\n",
              "      <th>Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>01/02/1965</td>\n",
              "      <td>13:44:18</td>\n",
              "      <td>19.246</td>\n",
              "      <td>145.616</td>\n",
              "      <td>Earthquake</td>\n",
              "      <td>131.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.0</td>\n",
              "      <td>MW</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ISCGEM860706</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>Automatic</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>01/04/1965</td>\n",
              "      <td>11:29:49</td>\n",
              "      <td>1.863</td>\n",
              "      <td>127.352</td>\n",
              "      <td>Earthquake</td>\n",
              "      <td>80.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.8</td>\n",
              "      <td>MW</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ISCGEM860737</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>Automatic</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>01/05/1965</td>\n",
              "      <td>18:05:58</td>\n",
              "      <td>-20.579</td>\n",
              "      <td>-173.972</td>\n",
              "      <td>Earthquake</td>\n",
              "      <td>20.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.2</td>\n",
              "      <td>MW</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ISCGEM860762</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>Automatic</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>01/08/1965</td>\n",
              "      <td>18:49:43</td>\n",
              "      <td>-59.076</td>\n",
              "      <td>-23.557</td>\n",
              "      <td>Earthquake</td>\n",
              "      <td>15.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.8</td>\n",
              "      <td>MW</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ISCGEM860856</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>Automatic</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>01/09/1965</td>\n",
              "      <td>13:32:50</td>\n",
              "      <td>11.938</td>\n",
              "      <td>126.427</td>\n",
              "      <td>Earthquake</td>\n",
              "      <td>15.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.8</td>\n",
              "      <td>MW</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ISCGEM860890</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>Automatic</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-61e3197a-5b5d-42bb-bb1a-9f04a2cb4adc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-61e3197a-5b5d-42bb-bb1a-9f04a2cb4adc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-61e3197a-5b5d-42bb-bb1a-9f04a2cb4adc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9c9fd64d-2002-474f-a556-27e4398452f2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9c9fd64d-2002-474f-a556-27e4398452f2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9c9fd64d-2002-474f-a556-27e4398452f2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PeS_7AwxHw0a",
        "outputId": "6fa2eaf0-41e0-4a6d-d780-93b447558614"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Date', 'Time', 'Latitude', 'Longitude', 'Type', 'Depth', 'Depth Error',\n",
              "       'Depth Seismic Stations', 'Magnitude', 'Magnitude Type',\n",
              "       'Magnitude Error', 'Magnitude Seismic Stations', 'Azimuthal Gap',\n",
              "       'Horizontal Distance', 'Horizontal Error', 'Root Mean Square', 'ID',\n",
              "       'Source', 'Location Source', 'Magnitude Source', 'Status'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 734
        },
        "id": "DVjdNR_2H1sr",
        "outputId": "16228751-9f5d-42a0-bc4a-f73ec8ec0203"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date                              0\n",
              "Time                              0\n",
              "Latitude                          0\n",
              "Longitude                         0\n",
              "Type                              0\n",
              "Depth                             0\n",
              "Depth Error                   18951\n",
              "Depth Seismic Stations        16315\n",
              "Magnitude                         0\n",
              "Magnitude Type                    3\n",
              "Magnitude Error               23085\n",
              "Magnitude Seismic Stations    20848\n",
              "Azimuthal Gap                 16113\n",
              "Horizontal Distance           21808\n",
              "Horizontal Error              22256\n",
              "Root Mean Square               6060\n",
              "ID                                0\n",
              "Source                            0\n",
              "Location Source                   0\n",
              "Magnitude Source                  0\n",
              "Status                            0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Time</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Latitude</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Longitude</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Depth</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Depth Error</th>\n",
              "      <td>18951</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Depth Seismic Stations</th>\n",
              "      <td>16315</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Magnitude</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Magnitude Type</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Magnitude Error</th>\n",
              "      <td>23085</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Magnitude Seismic Stations</th>\n",
              "      <td>20848</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Azimuthal Gap</th>\n",
              "      <td>16113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Horizontal Distance</th>\n",
              "      <td>21808</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Horizontal Error</th>\n",
              "      <td>22256</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Root Mean Square</th>\n",
              "      <td>6060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ID</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Source</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location Source</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Magnitude Source</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Status</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dropna(subset=['Date', 'Time'], inplace=True)"
      ],
      "metadata": {
        "id": "g_dTeOnSIpgu"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 765
        },
        "id": "pvKRlhbmItOP",
        "outputId": "49c12c78-eaec-438e-8726-90961378d57f"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date                          datetime64[ns]\n",
              "Time                                  object\n",
              "Latitude                             float64\n",
              "Longitude                            float64\n",
              "Type                                  object\n",
              "Depth                                float64\n",
              "Depth Error                          float64\n",
              "Depth Seismic Stations               float64\n",
              "Magnitude                            float64\n",
              "Magnitude Type                        object\n",
              "Magnitude Error                      float64\n",
              "Magnitude Seismic Stations           float64\n",
              "Azimuthal Gap                        float64\n",
              "Horizontal Distance                  float64\n",
              "Horizontal Error                     float64\n",
              "Root Mean Square                     float64\n",
              "ID                                    object\n",
              "Source                                object\n",
              "Location Source                       object\n",
              "Magnitude Source                      object\n",
              "Status                                object\n",
              "Year                                 float64\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <td>datetime64[ns]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Time</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Latitude</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Longitude</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Type</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Depth</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Depth Error</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Depth Seismic Stations</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Magnitude</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Magnitude Type</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Magnitude Error</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Magnitude Seismic Stations</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Azimuthal Gap</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Horizontal Distance</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Horizontal Error</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Root Mean Square</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ID</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Source</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location Source</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Magnitude Source</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Status</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Date'] = pd.to_datetime(df['Date'], errors='coerce')\n",
        "df['Time'] = pd.to_datetime(df['Time'], format='%H:%M:%S', errors='coerce').dt.time"
      ],
      "metadata": {
        "id": "gYtib6kCIWkJ"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Year'] = df['Date'].dt.year\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 372
        },
        "id": "pCIrmd4kIA3A",
        "outputId": "19370f89-c60e-409c-cbbe-b6587e6e2f53"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Date      Time  Latitude  Longitude        Type  Depth  Depth Error  \\\n",
              "0 1965-01-02  13:44:18    19.246    145.616  Earthquake  131.6          NaN   \n",
              "1 1965-01-04  11:29:49     1.863    127.352  Earthquake   80.0          NaN   \n",
              "2 1965-01-05  18:05:58   -20.579   -173.972  Earthquake   20.0          NaN   \n",
              "3 1965-01-08  18:49:43   -59.076    -23.557  Earthquake   15.0          NaN   \n",
              "4 1965-01-09  13:32:50    11.938    126.427  Earthquake   15.0          NaN   \n",
              "\n",
              "   Depth Seismic Stations  Magnitude Magnitude Type  ...  Azimuthal Gap  \\\n",
              "0                     NaN        6.0             MW  ...            NaN   \n",
              "1                     NaN        5.8             MW  ...            NaN   \n",
              "2                     NaN        6.2             MW  ...            NaN   \n",
              "3                     NaN        5.8             MW  ...            NaN   \n",
              "4                     NaN        5.8             MW  ...            NaN   \n",
              "\n",
              "   Horizontal Distance  Horizontal Error  Root Mean Square            ID  \\\n",
              "0                  NaN               NaN               NaN  ISCGEM860706   \n",
              "1                  NaN               NaN               NaN  ISCGEM860737   \n",
              "2                  NaN               NaN               NaN  ISCGEM860762   \n",
              "3                  NaN               NaN               NaN  ISCGEM860856   \n",
              "4                  NaN               NaN               NaN  ISCGEM860890   \n",
              "\n",
              "   Source Location Source Magnitude Source     Status    Year  \n",
              "0  ISCGEM          ISCGEM           ISCGEM  Automatic  1965.0  \n",
              "1  ISCGEM          ISCGEM           ISCGEM  Automatic  1965.0  \n",
              "2  ISCGEM          ISCGEM           ISCGEM  Automatic  1965.0  \n",
              "3  ISCGEM          ISCGEM           ISCGEM  Automatic  1965.0  \n",
              "4  ISCGEM          ISCGEM           ISCGEM  Automatic  1965.0  \n",
              "\n",
              "[5 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4f6d8a73-e6c8-44d6-bce9-18c214c92078\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Time</th>\n",
              "      <th>Latitude</th>\n",
              "      <th>Longitude</th>\n",
              "      <th>Type</th>\n",
              "      <th>Depth</th>\n",
              "      <th>Depth Error</th>\n",
              "      <th>Depth Seismic Stations</th>\n",
              "      <th>Magnitude</th>\n",
              "      <th>Magnitude Type</th>\n",
              "      <th>...</th>\n",
              "      <th>Azimuthal Gap</th>\n",
              "      <th>Horizontal Distance</th>\n",
              "      <th>Horizontal Error</th>\n",
              "      <th>Root Mean Square</th>\n",
              "      <th>ID</th>\n",
              "      <th>Source</th>\n",
              "      <th>Location Source</th>\n",
              "      <th>Magnitude Source</th>\n",
              "      <th>Status</th>\n",
              "      <th>Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1965-01-02</td>\n",
              "      <td>13:44:18</td>\n",
              "      <td>19.246</td>\n",
              "      <td>145.616</td>\n",
              "      <td>Earthquake</td>\n",
              "      <td>131.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.0</td>\n",
              "      <td>MW</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ISCGEM860706</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>1965.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1965-01-04</td>\n",
              "      <td>11:29:49</td>\n",
              "      <td>1.863</td>\n",
              "      <td>127.352</td>\n",
              "      <td>Earthquake</td>\n",
              "      <td>80.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.8</td>\n",
              "      <td>MW</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ISCGEM860737</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>1965.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1965-01-05</td>\n",
              "      <td>18:05:58</td>\n",
              "      <td>-20.579</td>\n",
              "      <td>-173.972</td>\n",
              "      <td>Earthquake</td>\n",
              "      <td>20.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.2</td>\n",
              "      <td>MW</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ISCGEM860762</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>1965.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1965-01-08</td>\n",
              "      <td>18:49:43</td>\n",
              "      <td>-59.076</td>\n",
              "      <td>-23.557</td>\n",
              "      <td>Earthquake</td>\n",
              "      <td>15.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.8</td>\n",
              "      <td>MW</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ISCGEM860856</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>1965.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1965-01-09</td>\n",
              "      <td>13:32:50</td>\n",
              "      <td>11.938</td>\n",
              "      <td>126.427</td>\n",
              "      <td>Earthquake</td>\n",
              "      <td>15.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.8</td>\n",
              "      <td>MW</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ISCGEM860890</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>ISCGEM</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>1965.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4f6d8a73-e6c8-44d6-bce9-18c214c92078')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4f6d8a73-e6c8-44d6-bce9-18c214c92078 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4f6d8a73-e6c8-44d6-bce9-18c214c92078');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f59ea0d9-18e2-480f-879d-f1139ab0ef65\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f59ea0d9-18e2-480f-879d-f1139ab0ef65')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f59ea0d9-18e2-480f-879d-f1139ab0ef65 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(df['Magnitude'], bins=30, kde=True)\n",
        "plt.title('Magnitude Distribution')\n",
        "plt.xlabel('Magnitude')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "HZg3eNFoIcj_",
        "outputId": "137313bc-9fe1-42cb-bd13-1a218d43a42f"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Type'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XxQvMovKI0Mo",
        "outputId": "e8b1de0b-3c89-46aa-b08d-b63fedbe3e5c"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Earthquake', 'Nuclear Explosion', 'Explosion', 'Rock Burst'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grouped_data = df.groupby('Type').size().reset_index(name='Count')\n",
        "\n",
        "plt.bar(grouped_data['Type'], grouped_data['Count'])\n",
        "plt.title('Earthquakes by Type')\n",
        "plt.xlabel('Type')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 556
        },
        "id": "dAt4VvaAI2po",
        "outputId": "f20dcd1e-3c75-4047-b0f7-8cb066f31413"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grouped_data = df.groupby('Year').size().reset_index(name='Count')\n",
        "\n",
        "plt.bar(grouped_data['Year'], grouped_data['Count'])\n",
        "plt.title('Earthquakes by year')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 493
        },
        "id": "YBPZPx4HI6DE",
        "outputId": "56a45385-7bef-4179-943d-4c313c3e6677"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(df['Depth'], bins=20, color='salmon', edgecolor='black')\n",
        "plt.title('Distribution of Earthquake Depths')\n",
        "plt.xlabel('Depth (km)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "XOEH32RPI9Jv",
        "outputId": "5481285e-dcea-44ea-fab2-edef53844190"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(df['Depth'], df['Magnitude'], alpha=0.5, c=df['Magnitude'], cmap='viridis')\n",
        "plt.title('Magnitude vs Depth of Earthquakes')\n",
        "plt.xlabel('Depth (km)')\n",
        "plt.ylabel('Magnitude')\n",
        "plt.colorbar(label='Magnitude')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "3xMLNQriJKyN",
        "outputId": "00c8a36a-e86e-4d1e-df2c-53d023fbe945"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjIAAAHHCAYAAACle7JuAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOz9d5ydZZ34/7/ucnqb3iczkw4hJCQIJvRmiKhYUfQnRUFY3GXRz+4q+xVBEVmsrLqwq+4qgg0RRUEIAQQM0kkICellMpneTm93uX5/nJlDTmYmmZpJMteTx9HMfe5y3fe5zznvc5X3pQghBJIkSZIkSccgdboLIEmSJEmSNF4ykJEkSZIk6ZglAxlJkiRJko5ZMpCRJEmSJOmYJQMZSZIkSZKOWTKQkSRJkiTpmCUDGUmSJEmSjlkykJEkSZIk6ZglAxlJkiRJko5ZMpCRpkVjYyNXXXXVETnWz3/+cxRFYe/evUfkeMe7wev52muvTfmxXn31VVauXInP50NRFDZs2DDlx5yI2267DUVR6Onpme6iHFJjYyPve9/7prsYkjQpZCBzjBv8UlEUhXXr1g15XghBfX09iqIc1R9cb7/9NrfddpsMNih8TRVFwe12U1NTw6pVq/jBD35ALBY7IuW45557+PnPf35EjjUcwzD42Mc+Rl9fH9///ve5//77aWhoGHbdZ599tuCaHfz4zW9+M6ll++Y3v8kf//jHSd2nJEnjo093AaTJ4Xa7+dWvfsWZZ55ZsPy5555j//79uFyuaSrZ8LZt24aqvhNHv/3223zta1/j3HPPpbGxcfoKdhT5+te/TlNTE4Zh0NHRwbPPPstNN93E9773Pf70pz9x8sknT+nx77nnHsrKyo5YzdnBdu3aRXNzMz/5yU+45pprRrXNjTfeyLve9a4hy1esWDGpZfvmN7/JRz/6UT74wQ9O6n4lSRo7GcgcJ9773vfyu9/9jh/84Afo+jsv669+9SuWL19+1FV1H22B1dFo9erVnHrqqfm/b775Zp555hne97738YEPfIAtW7bg8XimsYRTq6urC4CioqJRb3PWWWfx0Y9+dErKI4QgnU4f19dcko5FsmnpOHH55ZfT29vL2rVr88uy2SwPPfQQn/zkJ4fd5jvf+Q4rV66ktLQUj8fD8uXLeeihh4asl0qluPHGGykrKyMQCPCBD3yA1tZWFEXhtttuy6832D9g586dXHXVVRQVFREKhbj66qtJJpMF+zywj8zPf/5zPvaxjwFw3nnn5ZsDnn32WYAhxxluH4M2b97M+eefj8fjoa6ujm984xvYtj3s+T/++OOcddZZ+Hw+AoEAl1xyCZs3bx523UGvvfYaiqJw3333DXluzZo1KIrCo48+CkAsFuOmm26isbERl8tFRUUFF110EW+88cYhj3Eo559/PrfccgvNzc088MADBc9t3bqVj370o5SUlOB2uzn11FP505/+VLDOYLPV888/z3XXXUdpaSnBYJArrriC/v7+/HqNjY1s3ryZ5557Lv96nHvuuQX7ymQyfPGLX6S8vByfz8eHPvQhuru7R3UezzzzTP7aFxUVcemll7Jly5b881dddRXnnHMOAB/72MeGPf54/exnP+P888+noqICl8vFiSeeyL333jtkvcF+JGvWrOHUU0/F4/HwP//zPyiKQiKR4L777stfm4Pvw3A4fNj3QCaT4Qtf+ALl5eX599X+/fuH3O9XXXXVsLWUg++38ZzbcO677z50Xedf//Vf88tefvllLr74YkKhEF6vl3POOYcXXnihYLupuM8laSxkjcxxorGxkRUrVvDrX/+a1atXA7kv6kgkwic+8Ql+8IMfDNnmP//zP/nABz7Apz71KbLZLL/5zW/42Mc+xqOPPsoll1ySX++qq67iwQcf5NOf/jTvfve7ee655wqeP9hll11GU1MTd955J2+88QY//elPqaio4K677hp2/bPPPpsbb7yRH/zgB/z7v/87J5xwAkD+/0ero6OD8847D9M0+fKXv4zP5+PHP/7xsL+g77//fq688kpWrVrFXXfdRTKZ5N577+XMM89k/fr1IzZvnXrqqcyePZsHH3yQK6+8suC53/72txQXF7Nq1SoArr/+eh566CH+8R//kRNPPJHe3l7WrVvHli1bWLZs2ZjO7UCf/vSn+fd//3eefPJJrr32WiAXwJ1xxhnU1tbmz/3BBx/kgx/8IL///e/50Ic+VLCPf/zHf6SoqIjbbruNbdu2ce+999Lc3Jzva3L33XfzT//0T/j9fv6//+//A6CysrJgH//0T/9EcXExt956K3v37uXuu+/mH//xH/ntb397yPI/9dRTrF69mtmzZ3PbbbeRSqX44Q9/yBlnnMEbb7xBY2Mj1113HbW1tXzzm9/MNxcdfPzhxGKxYWsfS0tL81/69957L4sWLeIDH/gAuq7z5z//mRtuuAHbtvn85z9fsN22bdu4/PLLue6667j22mtZsGAB999/P9dccw2nnXYan/vc5wCYM2dOwXajeQ9cc801PPDAA3zyk59k5cqVPPPMM4d8X43GWM7tQD/+8Y+5/vrr+fd//3e+8Y1vALlgc/Xq1Sxfvpxbb70VVVXzgdLf/vY3TjvtNGDq7nNJGjUhHdN+9rOfCUC8+uqr4kc/+pEIBAIimUwKIYT42Mc+Js477zwhhBANDQ3ikksuKdh2cL1B2WxWnHTSSeL888/PL3v99dcFIG666aaCda+66ioBiFtvvTW/7NZbbxWA+MxnPlOw7oc+9CFRWlpasKyhoUFceeWV+b9/97vfCUD89a9/HXKOBx9npH3cdNNNAhAvv/xyfllXV5cIhUICEHv27BFCCBGLxURRUZG49tprC/bX0dEhQqHQkOUHu/nmm4XD4RB9fX35ZZlMRhQVFRWceygUEp///OcPua/hHPiajiQUColTTjkl//cFF1wgFi9eLNLpdH6Zbdti5cqVYt68eUP2vXz5cpHNZvPLv/WtbwlAPPLII/llixYtEuecc86I5bvwwguFbdv55V/4wheEpmkiHA4f8vyWLl0qKioqRG9vb37Zm2++KVRVFVdccUV+2V//+lcBiN/97neH3N+B6470aG9vz6978H0vhBCrVq0Ss2fPLljW0NAgAPHEE08MWd/n8xXce4NG+x7YsGGDAMQNN9xQsN4nP/nJIff7lVdeKRoaGkY81oHGcm6Dnwf/+Z//KRRFEbfffnv+edu2xbx588SqVasKXuNkMimamprERRddlF823vtckiaLbFo6jlx22WWkUikeffRRYrEYjz766IjNSkBBTUV/fz+RSISzzjqroEr4iSeeAOCGG24o2Paf/umfRtzv9ddfX/D3WWedRW9vL9FodEznM1Z/+ctfePe7353/pQhQXl7Opz71qYL11q5dSzgc5vLLL6enpyf/0DSN008/nb/+9a+HPM7HP/5xDMPg4Ycfzi978sknCYfDfPzjH88vKyoq4uWXX6atrW2SzvAdfr8/P3qpr6+PZ555hssuuyxfI9HT00Nvby+rVq1ix44dtLa2Fmz/uc99DofDkf/7H/7hH9B1nb/85S+jLsPnPve5gqaNs846C8uy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yWQyPPHEE8FYNm7cyOjoKM8880zQ5r777sPzPDZs2HBC+yuE4DOf+Qy/+MUvuO+++1i0aNGE5WeeeSaGYUwYz9atW9m7d++E8WzatGnChfnee+8llUrNeAVXz/Mol8uzbhwXXnghmzZt4vnnnw9e69ev5+qrrw7+nk3jmUwul2PHjh20t7fPut/mzW9+80ESBa+++ioLFiwAZt81oMoPfvADWlpauPzyy4PPZttvE3Icmelo49nIbbfdJizLErfeeqt46aWXxKc+9SmRTqcnRMK/Uchms+K5554Tzz33nADE//7f/1s899xzYs+ePUIImXqZTqfFL3/5S/Hiiy+KK6+8csrUy3Xr1oknnnhCPPzww+KUU06ZkdTLP/3TPxV1dXXigQcemJCCWSgUgjaf/vSnxfz588V9990nnn76abFx40axcePGYHk1/fLtb3+7eP7558Vdd90lmpubT3j65Ze+9CXx4IMPil27dokXX3xRfOlLXxKKooh77rlnVo3jUNRmLQkxu8bzhS98QTzwwANi165d4pFHHhEXXXSRaGpqEv39/bNuLE8++aTQdV38zd/8jdi2bZv4j//4DxGLxcSPf/zjoM1sugYIIbNE58+fL774xS8etGw2/TYhx4/QkDlK/vEf/1HMnz9fmKYpzjrrLPH444/PdJem5P777xfAQa9rr71WCCHTL//X//pforW1VViWJS688EKxdevWCesYGhoSV111lUgkEiKVSomPfexjIpvNnvCxTDUOQPzgBz8I2hSLRfFnf/Znor6+XsRiMfGe97xH9PT0TFjP7t27xaWXXiqi0ahoamoSX/jCF4Rt2yd0LB//+MfFggULhGmaorm5WVx44YWBETObxnEoJhsys2k8H/rQh0R7e7swTVN0dnaKD33oQxN0V2bTWIQQ4te//rU47bTThGVZYsWKFeK73/3uhOWz6RoghBB33323AA7qoxCz77cJOT4oQggxI66gkJCQkJCQkJBjJIyRCQkJCQkJCZm1hIZMSEhISEhIyKwlNGRCQkJCQkJCZi2hIRMSEhISEhIyawkNmZCQkJCQkJBZS2jIhISEhISEhMxaQkMmJCQkJCQkZNYSGjIhISchu3fvRlEUnn/++Wl/9/e//z2nnnoqrusCcOONN3L66acf3w4CZ599Nv/zP/9z3NcbEhIytwgNmZCQE8xHP/pRFEVBURQMw6C1tZWLL76Y73//+3ie97ps793vfvdxW99f/uVf8tWvfhVN047bOqfiq1/9Kl/60pdel30SEhIydwgNmZCQGeAd73gHPT097N69mzvvvJMLLriAz33uc1xxxRU4jjPT3TskDz/8MDt27OB973vf676tSy+9lGw2y5133vm6byskJGT2EhoyISEzgGVZtLW10dnZyRlnnMFXvvIVfvnLX3LnnXdy6623Bu1GR0f5xCc+QXNzM6lUire97W288MILwfLqtM53vvMdurq6iMVifPCDH2RsbCxY/sMf/pBf/vKXgRfogQceCL6/c+dOLrjgAmKxGGvXruWxxx47bL9vu+02Lr74YiKRyCHb7Nixg8WLF/OZz3wGIQS33nor6XSa3/zmNyxfvpxYLMb73/9+CoUCP/zhD1m4cCH19fV89rOfDaarADRN47LLLuO2226b5t4NCQk5mQgNmZCQNwhve9vbWLt2LT//+c+Dzz7wgQ/Q39/PnXfeyTPPPMMZZ5zBhRdeyPDwcNBm+/bt/PSnP+XXv/41d911F8899xx/9md/BsD111/PBz/4wcAD1NPTwznnnBN894YbbuD666/n+eefZ9myZVx11VWH9Qg99NBDrF+//pDLX3zxRc4991z++I//mH/6p39CURQACoUC3/72t7ntttu46667eOCBB3jPe97DHXfcwR133MG///u/853vfIef/exnE9Z31lln8dBDD01vR4aEhJxU6DPdgZCQkHFWrFjBiy++CMhpnCeffJL+/n4sywLg7//+77n99tv52c9+xqc+9SkASqUSP/rRj+js7ATgH//xH7n88sv51re+RVtbG9FolHK5TFtb20Hbu/7667n88ssB+PrXv86qVavYvn07K1asmLJ/e/bsoaOjY8pljz76KFdccQU33HADX/jCFyYss22bW265hSVLlgDw/ve/n3//93+nr6+PRCLBypUrueCCC7j//vv50Ic+FHyvo6OD7u5uPM9DVcPnrpCQkIMJrwwhIW8ghBCBF+OFF14gl8vR2NhIIpEIXrt27WLHjh3Bd+bPnx8YMQAbN27E8zy2bt36mttbs2ZN8Hd7ezsA/f39h2xfLBannFbau3cvF198MX/1V391kBEDEIvFAiMGoLW1lYULF5JIJCZ8Nnnb0WgUz/Mol8uvOZaQkJCTk9AjExLyBuLll19m0aJFAORyOdrb2yfEtFRJp9PHZXuGYQR/Vw2ow2UJNTU1MTIyctDnzc3NdHR08JOf/ISPf/zjpFKpQ26nuq2pPpu87eHhYeLxONFo9MgGFBISctIRemRCQt4g3HfffWzatCnICDrjjDPo7e1F13WWLl064dXU1BR8b+/evRw4cCB4//jjj6OqKsuXLwfANM0JQbTHwrp163jppZcO+jwajfKb3/yGSCTCJZdcQjabPS7b27x5M+vWrTsu6woJCZmbhIZMSMgMUC6X6e3tZf/+/Tz77LN885vf5Morr+SKK67gmmuuAeCiiy5i48aNvPvd7+aee+5h9+7dPProo9xwww08/fTTwboikQjXXnstL7zwAg899BCf/exn+eAHPxjExCxcuJAXX3yRrVu3Mjg4iG3bR93vSy65hIcffnjKZfF4nN/+9rfous6ll15KLpc76u1Ueeihh3j7299+zOsJCQmZu4SGTEjIDHDXXXfR3t7OwoULecc73sH999/Pt7/9bX75y18GQnOKonDHHXfwlre8hY997GMsW7aMP/qjP2LPnj20trYG61q6dCnvfe97ueyyy3j729/OmjVr+Jd/+Zdg+Sc/+UmWL1/O+vXraW5u5pFHHjnqfl999dVs2bLlkPE3iUSCO++8EyEEl19+Ofl8/qi3tX//fh599FE+9rGPHfU6QkJC5j6KEELMdCdCQkKOjhtvvJHbb7/9qEoNHC1/8Rd/QSaT4Tvf+c7rup0vfvGLjIyM8N3vfvd13U5ISMjsJvTIhISETIsbbriBBQsWvO6lA1paWvjrv/7r13UbISEhs58waykkJGRapNNpvvKVr7zu25kqjTskJCRkMuHUUkhISEhISMisJZxaCgkJCQkJCZm1hIZMSEhISEhIyKwlNGRCQkJCQkJCZi2hIRMSEhISEhIyawkNmZCQkJCQkJBZS2jIhISEhISEhMxaQkMmJCQkJCQkZNYSGjIhISEhISEhs5bQkAkJCQkJCQmZtfz/AfZAoD6TSv2fAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}