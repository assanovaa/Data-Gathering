{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyObBAFurZjTChOL+m9NWSV4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/assanovaa/Data-Gathering/blob/main/Task%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pandas"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HeE25TQ-DIpi",
        "outputId": "7aea3d68-face-4b5b-d724-91847827e278"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "movies = pd.DataFrame({\n",
        "    'movie_id': [1, 2, 3],\n",
        "    'title': ['Avengers', 'Frozen 2', 'Joker']\n",
        "})\n",
        "\n",
        "users = pd.DataFrame({\n",
        "    'user_id': [1, 2, 3, 4],\n",
        "    'name': ['Daniel', 'Monica', 'Maria','James']\n",
        "})\n",
        "\n",
        "movie_ratings = pd.DataFrame({\n",
        "    'movie_id': [1, 2, 1, 3, 2],\n",
        "    'user_id': [1, 1, 2, 2, 3],\n",
        "    'rating': [4, 5, 3, 4, 5],\n",
        "    'created_at': pd.to_datetime(['2020-02-01', '2020-02-05', '2020-02-10', '2020-03-01', '2020-02-15'])\n",
        "})\n",
        "\n",
        "def movie_rating(movies: pd.DataFrame,\n",
        "                 users: pd.DataFrame,\n",
        "                 movie_ratings: pd.DataFrame) -> pd.DataFrame:\n",
        "    ratings = movie_ratings.merge(users, on='user_id', how='left')\n",
        "    ratings = ratings.merge(movies, on='movie_id', how='left')\n",
        "\n",
        "    highest_user = ratings['name'].value_counts().idxmax()\n",
        "    ratings_feb_2020 = ratings[(ratings['created_at'].dt.year == 2020) &\n",
        "                                (ratings['created_at'].dt.month == 2)]\n",
        "    highest_movie = ratings_feb_2020.groupby('title')['rating'].mean().idxmax()\n",
        "\n",
        "    return pd.DataFrame({'results': [highest_user, highest_movie]},\n",
        "                        index=['Highest User', 'Highest Movie'])\n",
        "\n",
        "result_df = movie_rating(movies, users, movie_ratings)\n",
        "print(result_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IzOXFG2MDTjh",
        "outputId": "7d4dc5df-88ce-46b4-cc71-1695733b79a3"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                results\n",
            "Highest User     Daniel\n",
            "Highest Movie  Frozen 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "data = {\n",
        "    'stock_name': [\n",
        "        'Leetcode', 'Corona Masks', 'Leetcode',\n",
        "        'Handbags', 'Corona Masks', 'Corona Masks',\n",
        "        'Corona Masks', 'Corona Masks', 'Handbags', 'Corona Masks'\n",
        "    ],\n",
        "    'operation': [\n",
        "        'Buy', 'Buy', 'Sell',\n",
        "        'Buy', 'Sell', 'Buy',\n",
        "        'Sell', 'Buy', 'Sell', 'Sell'\n",
        "    ],\n",
        "    'operation_day': [\n",
        "        1, 2, 5,\n",
        "        17, 3, 4,\n",
        "        5, 6, 29, 10\n",
        "    ],\n",
        "    'price': [\n",
        "        1000, 10, 9000,\n",
        "        30000, 1010, 1000,\n",
        "        500, 1000, 7000, 10000\n",
        "    ]\n",
        "}\n",
        "\n",
        "def capital_gainloss(stocks: pd.DataFrame) -> pd.DataFrame:\n",
        "    stocks['capital_gain_loss'] = np.where(stocks['operation'] == 'Buy', stocks['price'] * (-1), stocks['price'])\n",
        "\n",
        "    result = stocks.groupby(['stock_name'])[['capital_gain_loss']].sum().reset_index()\n",
        "\n",
        "    return result\n",
        "stocks_df = pd.DataFrame(data)\n",
        "\n",
        "result = capital_gainloss(stocks_df)\n",
        "print(result)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_P6zHolHrupU",
        "outputId": "7cc4ae60-112c-40c3-ba09-42e5e6bbca72"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     stock_name  capital_gain_loss\n",
            "0  Corona Masks               9500\n",
            "1      Handbags             -23000\n",
            "2      Leetcode               8000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "employee_data = {\n",
        "    'id': [1, 2, 3],\n",
        "    'salary': [100, 200, 300]\n",
        "}\n",
        "\n",
        "employee_df = pd.DataFrame(employee_data)\n",
        "\n",
        "def second_highest_salary(employee: pd.DataFrame) -> pd.DataFrame:\n",
        "    unique_salaries = employee['salary'].unique()\n",
        "    if len(unique_salaries) >= 2:\n",
        "\n",
        "        second_highest = sorted(unique_salaries, reverse=True)[1]\n",
        "    else:\n",
        "        second_highest = None\n",
        "\n",
        "    return pd.DataFrame({'SecondHighestSalary': [second_highest]})\n",
        "\n",
        "\n",
        "result_df = second_highest_salary(employee_df)\n",
        "print(result_df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NKEfu2uE_WRG",
        "outputId": "a8a6e2ed-84ee-493a-b37f-dcd72042e887"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   SecondHighestSalary\n",
            "0                  200\n"
          ]
        }
      ]
    }
  ]
}